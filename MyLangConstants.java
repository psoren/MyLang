/* Generated By:JavaCC: Do not edit this line. MyLangConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyLangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int LITERAL = 9;
  /** RegularExpression Id. */
  int INTEGER = 10;
  /** RegularExpression Id. */
  int DIGIT = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int LPAREN = 13;
  /** RegularExpression Id. */
  int RPAREN = 14;
  /** RegularExpression Id. */
  int LBRACKET = 15;
  /** RegularExpression Id. */
  int RBRACKET = 16;
  /** RegularExpression Id. */
  int OUT = 17;
  /** RegularExpression Id. */
  int OUTLN = 18;
  /** RegularExpression Id. */
  int IN = 19;
  /** RegularExpression Id. */
  int ASSIGN = 20;
  /** RegularExpression Id. */
  int THIS = 21;
  /** RegularExpression Id. */
  int AND = 22;
  /** RegularExpression Id. */
  int OR = 23;
  /** RegularExpression Id. */
  int NOT = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int GREATERTHAN = 27;
  /** RegularExpression Id. */
  int LESSTHAN = 28;
  /** RegularExpression Id. */
  int LEQ = 29;
  /** RegularExpression Id. */
  int GEQ = 30;
  /** RegularExpression Id. */
  int RARROW = 31;
  /** RegularExpression Id. */
  int EQUALS = 32;
  /** RegularExpression Id. */
  int DM = 33;
  /** RegularExpression Id. */
  int DC = 34;
  /** RegularExpression Id. */
  int DI = 35;
  /** RegularExpression Id. */
  int END = 36;
  /** RegularExpression Id. */
  int COLON = 37;
  /** RegularExpression Id. */
  int GIVE = 38;
  /** RegularExpression Id. */
  int MAIN = 39;
  /** RegularExpression Id. */
  int SELF = 40;
  /** RegularExpression Id. */
  int DOT = 41;
  /** RegularExpression Id. */
  int FOR = 42;
  /** RegularExpression Id. */
  int CONTAINS = 43;
  /** RegularExpression Id. */
  int ADD = 44;
  /** RegularExpression Id. */
  int COMMENT = 45;
  /** RegularExpression Id. */
  int STRING = 46;
  /** RegularExpression Id. */
  int VARIABLE = 47;
  /** RegularExpression Id. */
  int IDENTIFIER = 48;
  /** RegularExpression Id. */
  int INITIAL = 49;
  /** RegularExpression Id. */
  int SUBSEQUENT = 50;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<LITERAL>",
    "<INTEGER>",
    "<DIGIT>",
    "<BOOLEAN>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"out\"",
    "\"outln\"",
    "\"in\"",
    "\"=\"",
    "\"this\"",
    "\"and\"",
    "\"or\"",
    "\"!\"",
    "\"if\"",
    "\"else\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"->\"",
    "\"?\"",
    "\"DM\"",
    "\"DC\"",
    "\"DI\"",
    "<END>",
    "\":\"",
    "\"give\"",
    "\"MAIN\"",
    "\"self\"",
    "\".\"",
    "\"for\"",
    "\"contains\"",
    "\"add\"",
    "<COMMENT>",
    "<STRING>",
    "<VARIABLE>",
    "<IDENTIFIER>",
    "<INITIAL>",
    "<SUBSEQUENT>",
  };

}
